# Task ID: 6
# Title: Summarize Tool Implementation
# Status: done
# Dependencies: 3, 4
# Priority: high
# Description: Implement the 'summarize' tool that takes a blog post URL and generates a concise summary of its content.
# Details:
1. Create a tool definition for the summarize functionality
2. Implement web scraping to fetch the content of a specific blog post
3. Use Claude Code to generate a summary of the post
4. Store the summary in the .postgen/summaries directory
5. Implement caching to avoid re-summarizing already processed posts
6. Add proper error handling for invalid URLs or inaccessible content

```typescript
import { MCPTool } from '@modelcontextprotocol/sdk';
import { ClaudeService } from './services/claude-service';
import * as fs from 'fs/promises';
import * as path from 'path';
import * as crypto from 'crypto';

export const summarizeTool: MCPTool = {
  name: 'marketing_post_generator_mcp__summarize',
  description: 'Summarize a blog post from its URL',
  parameters: {
    url: {
      type: 'string',
      description: 'The URL of the blog post to summarize',
    },
  },
  handler: async ({ url }, { claudeService }) => {
    // Validate .postgen directory exists
    const postgenDir = path.join(process.cwd(), '.postgen');
    try {
      await fs.access(postgenDir);
    } catch (error) {
      throw new Error('Please run the init prompt first');
    }
    
    // Create a hash of the URL for the filename
    const urlHash = crypto.createHash('md5').update(url).digest('hex');
    const summaryPath = path.join(postgenDir, 'summaries', `${urlHash}.json`);
    
    // Check if we already have a summary
    try {
      const existingSummary = await fs.readFile(summaryPath, 'utf-8');
      return JSON.parse(existingSummary);
    } catch (error) {
      // No existing summary, continue
    }
    
    // Fetch the blog post content
    const { title, content } = await fetchBlogPost(url);
    
    // Generate summary with Claude
    const summary = await claudeService.generateContent(
      `Summarize this blog post in a concise way that captures the main points and key insights:\n\nTitle: ${title}\n\nContent: ${content}`
    );
    
    // Save the summary
    const result = {
      url,
      title,
      summary,
      timestamp: new Date().toISOString(),
    };
    
    await fs.writeFile(summaryPath, JSON.stringify(result, null, 2));
    
    return result;
  },
};

async function fetchBlogPost(url) {
  // Implementation of web scraping for a specific post
  // This would use a library like cheerio or puppeteer
}
```

# Test Strategy:
Test with mock web responses to verify post fetching. Test summary generation with mock Claude responses. Verify summaries are correctly stored in the .postgen directory. Test caching behavior and error handling for network issues.
