# Task ID: 7
# Title: Implement Firecrawl Search Adapter
# Status: done
# Dependencies: 7
# Priority: high
# Description: Create a Firecrawl Search Adapter as the first concrete implementation of the pluggable search architecture, providing professional content extraction capabilities as an alternative to primitive web scraping.
# Details:
1. Install and configure Firecrawl SDK/API client:
```typescript
import { FirecrawlClient } from '@mendable/firecrawl-js';

// Using the official Firecrawl SDK
// No need to implement custom client as we're using the official SDK
```

2. Create FirecrawlSearchAdapter class implementing the ISearchAdapter interface:
```typescript
import { ISearchAdapter, SearchOptions, SearchResult } from './search-adapter-interface';
import { FirecrawlClient } from '@mendable/firecrawl-js';
import { logger } from '../services/logging-service';

export class FirecrawlSearchAdapter implements ISearchAdapter {
  private client: FirecrawlClient;
  private config: FirecrawlAdapterConfig;
  private dailyCreditsUsed: number = 0;
  private lastRequestTime: number = 0;
  
  constructor(config: FirecrawlAdapterConfig) {
    this.config = config;
    this.client = new FirecrawlClient(config.apiKey);
  }
  
  async initialize(): Promise<void> {
    // Validate API key and connection
    try {
      // Test API connection
      logger.info('Initializing Firecrawl search adapter');
      await this.healthCheck();
      logger.info('Firecrawl search adapter initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize Firecrawl adapter', { error });
      throw new Error('Firecrawl adapter initialization failed');
    }
  }
  
  async healthCheck(): Promise<boolean> {
    try {
      // Simple API call to verify credentials and connectivity
      await this.executeWithRetry(() => this.client.validateApiKey());
      return true;
    } catch (error) {
      logger.error('Firecrawl health check failed', { error });
      return false;
    }
  }
  
  getName(): string {
    return 'Firecrawl';
  }
  
  async fetchContent(url: string): Promise<string> {
    logger.info('Fetching content via Firecrawl', { url });
    
    try {
      const response = await this.executeWithRetry(() => 
        this.client.scrape(url, { 
          outputFormat: 'markdown',
          includeMetadata: true,
          filterAds: true,
          filterNavigation: true
        })
      );
      
      if (!response.content) {
        throw new Error('No content returned from Firecrawl');
      }
      
      return response.content;
    } catch (error) {
      logger.error('Error fetching content from Firecrawl', { url, error });
      throw new Error(`Failed to fetch content: ${error.message}`);
    }
  }
  
  async sampleDomain(domain: string, count: number): Promise<Array<{url: string, content: string}>> {
    logger.info('Sampling domain via Firecrawl', { domain, count });
    
    try {
      // First discover blog posts on the domain using crawl API
      const crawlResult = await this.executeWithRetry(() => 
        this.client.crawl(domain, { 
          maxUrls: Math.min(count * 2, 50), // Request more than needed to filter
          maxDepth: 2,
          contentTypeFilter: 'blog',
          includeContent: true,
          outputFormat: 'markdown'
        })
      );
      
      if (!crawlResult.pages || crawlResult.pages.length === 0) {
        logger.warn('No blog posts found on domain', { domain });
        return [];
      }
      
      // Filter for blog posts with sufficient content
      const blogPosts = crawlResult.pages.filter(page => 
        page.contentType === 'blog' && 
        page.content && 
        page.content.length > 500
      );
      
      // Select a representative sample
      const selectedPages = this.selectRepresentativeSample(blogPosts, count);
      
      // Return in the expected format
      return selectedPages.map(page => ({
        url: page.url,
        content: page.content
      }));
    } catch (error) {
      logger.error('Error sampling domain with Firecrawl', { domain, error });
      throw new Error(`Failed to sample domain: ${error.message}`);
    }
  }
  
  private selectRepresentativeSample(pages: any[], count: number): any[] {
    // Sort by publication date (newest first) if available
    const sortedPages = [...pages].sort((a, b) => {
      if (a.publishDate && b.publishDate) {
        return new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime();
      }
      return 0;
    });
    
    // Take a mix of recent and diverse content
    // 60% most recent, 40% selected for content diversity
    const recentCount = Math.ceil(count * 0.6);
    const diverseCount = count - recentCount;
    
    const recentPages = sortedPages.slice(0, recentCount);
    
    // For diversity, select pages with different content lengths/topics
    // This is a simple approach - could be enhanced with NLP for topic diversity
    const remainingPages = sortedPages.slice(recentCount);
    remainingPages.sort((a, b) => b.content.length - a.content.length);
    
    const diversePages = [];
    const step = Math.max(1, Math.floor(remainingPages.length / diverseCount));
    for (let i = 0; i < remainingPages.length && diversePages.length < diverseCount; i += step) {
      diversePages.push(remainingPages[i]);
    }
    
    return [...recentPages, ...diversePages].slice(0, count);
  }
  
  async search(query: string, options?: SearchOptions): Promise<SearchResult[]> {
    logger.info('Searching via Firecrawl', { query, options });
    
    try {
      const searchParams: any = {
        limit: options?.limit || 10,
        outputFormat: 'markdown'
      };
      
      if (options?.domain) {
        searchParams.siteFilter = options.domain;
      }
      
      const response = await this.executeWithRetry(() => 
        this.client.search(query, searchParams)
      );
      
      // Convert to standardized format
      return response.results.map(result => ({
        url: result.url,
        title: result.title,
        snippet: result.snippet || result.summary,
        publishDate: result.publishDate ? new Date(result.publishDate) : undefined,
        author: result.author,
        score: result.relevanceScore,
        source: 'firecrawl'
      }));
    } catch (error) {
      logger.error('Error searching with Firecrawl', { query, error });
      throw new Error(`Search failed: ${error.message}`);
    }
  }
  
  private async executeWithRetry<T>(apiCall: () => Promise<T>): Promise<T> {
    let attempts = 0;
    
    while (attempts < this.config.maxRetries) {
      try {
        // Enforce rate limiting
        await this.enforceRateLimit();
        
        // Execute the API call
        const result = await apiCall();
        
        // Track credit usage from API response
        const creditsUsed = (result as any).creditsUsed || 1;
        this.trackCreditUsage(creditsUsed);
        
        return result;
      } catch (error) {
        attempts++;
        
        if (this.isRetryableError(error) && attempts < this.config.maxRetries) {
          const delay = this.calculateBackoff(attempts);
          logger.warn('Retrying Firecrawl API call', { attempts, delay, error: error.message });
          await new Promise(resolve => setTimeout(resolve, delay));
        } else {
          throw error;
        }
      }
    }
    
    throw new Error(`Failed after ${this.config.maxRetries} attempts`);
  }
  
  private isRetryableError(error: any): boolean {
    // Determine if error is retryable (rate limits, temporary server issues)
    return error.status === 429 || error.status >= 500 || 
           error.message?.includes('timeout') || 
           error.message?.includes('rate limit');
  }
  
  private calculateBackoff(attempt: number): number {
    // Exponential backoff with jitter
    return Math.min(1000 * Math.pow(2, attempt) + Math.random() * 1000, 30000);
  }
  
  private async enforceRateLimit(): Promise<void> {
    const now = Date.now();
    const minInterval = (60 * 1000) / this.config.rateLimit;
    
    if (now - this.lastRequestTime < minInterval) {
      const delay = minInterval - (now - this.lastRequestTime);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
    
    this.lastRequestTime = Date.now();
  }
  
  private trackCreditUsage(credits: number): void {
    this.dailyCreditsUsed += credits;
    this.logApiUsage('api_call', credits);
    
    // Check if we've exceeded our daily limit
    if (this.config.maxCreditsPerDay && this.dailyCreditsUsed >= this.config.maxCreditsPerDay) {
      logger.error('Firecrawl daily credit limit exceeded', {
        used: this.dailyCreditsUsed,
        limit: this.config.maxCreditsPerDay
      });
      throw new Error('Daily API credit limit exceeded');
    }
  }
  
  private logApiUsage(endpoint: string, credits: number) {
    logger.info('Firecrawl API usage', { 
      endpoint, 
      credits,
      dailyUsage: this.dailyCreditsUsed,
      dailyLimit: this.config.maxCreditsPerDay
    });
    
    // Emit metrics or events if needed
    if (this.config.maxCreditsPerDay && 
        this.dailyCreditsUsed > this.config.maxCreditsPerDay * 0.8) {
      logger.warn('Firecrawl credit usage approaching daily limit', {
        used: this.dailyCreditsUsed,
        limit: this.config.maxCreditsPerDay
      });
    }
  }
}

interface FirecrawlAdapterConfig {
  apiKey: string;
  rateLimit: number; // Requests per minute
  maxRetries: number;
  timeoutMs: number;
  maxCreditsPerDay?: number; // Optional credit management
}
```

3. Register the adapter with the factory:
```typescript
// In search-adapter-factory.ts
import { ISearchAdapter } from './search-adapter-interface';
import { FirecrawlSearchAdapter } from './firecrawl-search-adapter';
import { WebScrapingAdapter } from './web-scraping-adapter';

export class SearchAdapterFactory {
  static createAdapter(type: string, config: any): ISearchAdapter {
    switch (type.toLowerCase()) {
      case 'firecrawl':
        return new FirecrawlSearchAdapter({
          apiKey: config.apiKey,
          rateLimit: config.rateLimit || 30, // Default to 30 requests per minute
          maxRetries: config.maxRetries || 3,
          timeoutMs: config.timeoutMs || 10000,
          maxCreditsPerDay: config.maxCreditsPerDay
        });
      case 'webscraping':
        return new WebScrapingAdapter(config);
      // Other adapter types will be added here
      default:
        throw new Error(`Unknown search adapter type: ${type}`);
    }
  }
}
```

4. Add configuration in the application settings:
```typescript
// In config.ts
export interface SearchConfig {
  defaultAdapter: string;
  adapters: {
    firecrawl?: {
      apiKey: string;
      rateLimit?: number;
      maxRetries?: number;
      timeoutMs?: number;
      maxCreditsPerDay?: number;
    };
    webscraping?: {
      // WebScrapingAdapter config
    };
    // Other adapters
  };
}

// Example configuration
const searchConfig: SearchConfig = {
  defaultAdapter: 'firecrawl',
  adapters: {
    firecrawl: {
      apiKey: process.env.FIRECRAWL_API_KEY,
      rateLimit: 30,
      maxRetries: 3,
      timeoutMs: 15000,
      maxCreditsPerDay: 1000
    },
    webscraping: {
      // WebScrapingAdapter config
    }
  }
};
```

5. Add unit tests for the Firecrawl adapter:
```typescript
// In firecrawl-search-adapter.test.ts
import { FirecrawlSearchAdapter } from './firecrawl-search-adapter';
import { FirecrawlClient } from '@mendable/firecrawl-js';

// Mock the Firecrawl SDK
jest.mock('@mendable/firecrawl-js');

describe('FirecrawlSearchAdapter', () => {
  let adapter: FirecrawlSearchAdapter;
  let mockClient: jest.Mocked<FirecrawlClient>;
  
  beforeEach(() => {
    // Setup mock client
    mockClient = new FirecrawlClient('test-api-key') as jest.Mocked<FirecrawlClient>;
    (FirecrawlClient as jest.Mock).mockImplementation(() => mockClient);
    
    // Create adapter with test config
    adapter = new FirecrawlSearchAdapter({
      apiKey: 'test-api-key',
      rateLimit: 60,
      maxRetries: 2,
      timeoutMs: 5000
    });
  });
  
  test('initialize should validate API key', async () => {
    mockClient.validateApiKey.mockResolvedValue({ valid: true });
    
    await expect(adapter.initialize()).resolves.not.toThrow();
    expect(mockClient.validateApiKey).toHaveBeenCalled();
  });
  
  test('fetchContent should return markdown content', async () => {
    const mockContent = '# Test Content\n\nThis is test content';
    mockClient.scrape.mockResolvedValue({
      content: mockContent,
      url: 'https://example.com',
      creditsUsed: 1
    });
    
    const result = await adapter.fetchContent('https://example.com');
    
    expect(result).toBe(mockContent);
    expect(mockClient.scrape).toHaveBeenCalledWith('https://example.com', expect.any(Object));
  });
  
  test('search should return formatted results', async () => {
    const mockResults = {
      results: [
        {
          url: 'https://example.com/page1',
          title: 'Test Page 1',
          snippet: 'This is a test snippet',
          publishDate: '2023-01-01T00:00:00Z',
          author: 'Test Author',
          relevanceScore: 0.95
        }
      ],
      creditsUsed: 2
    };
    
    mockClient.search.mockResolvedValue(mockResults);
    
    const results = await adapter.search('test query', { limit: 10 });
    
    expect(results).toHaveLength(1);
    expect(results[0]).toEqual({
      url: 'https://example.com/page1',
      title: 'Test Page 1',
      snippet: 'This is a test snippet',
      publishDate: new Date('2023-01-01T00:00:00Z'),
      author: 'Test Author',
      score: 0.95,
      source: 'firecrawl'
    });
  });
  
  test('should respect rate limits', async () => {
    // Mock successful API calls
    mockClient.scrape.mockResolvedValue({ content: 'test', creditsUsed: 1 });
    
    // Set a very low rate limit for testing
    adapter = new FirecrawlSearchAdapter({
      apiKey: 'test-api-key',
      rateLimit: 2, // 2 requests per minute
      maxRetries: 2,
      timeoutMs: 5000
    });
    
    const start = Date.now();
    
    // Make 3 requests - the third should be delayed
    await adapter.fetchContent('https://example.com/1');
    await adapter.fetchContent('https://example.com/2');
    await adapter.fetchContent('https://example.com/3');
    
    const duration = Date.now() - start;
    
    // With a rate limit of 2 per minute, the third request should be delayed by at least 30 seconds
    expect(duration).toBeGreaterThanOrEqual(30000);
  });
});
```

# Test Strategy:

