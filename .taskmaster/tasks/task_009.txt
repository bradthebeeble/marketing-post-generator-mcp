# Task ID: 9
# Title: Refactor SampleTool and SummarizeTool to Use Pluggable Search Architecture
# Status: pending
# Dependencies: 16, 17, 5, 6
# Priority: high
# Description: Update SampleTool and SummarizeTool to use the new SearchService instead of WebScrapingService, ensuring backward compatibility while leveraging the improved search adapter architecture.
# Details:
1. Update SampleTool to use SearchService:
```typescript
// Before
import { WebScrapingService } from './services/web-scraping-service';

export class SampleTool implements MCPTool {
  private webScraper: WebScrapingService;
  
  constructor(webScraper: WebScrapingService) {
    this.webScraper = webScraper;
  }
  
  // Tool methods using webScraper
}

// After
import { ISearchAdapter } from './adapters/search-adapter-interface';

export class SampleTool implements MCPTool {
  private searchService: ISearchAdapter;
  
  constructor(searchService: ISearchAdapter) {
    this.searchService = searchService;
  }
  
  // Updated tool methods using searchService
}
```

2. Update SummarizeTool to use SearchService:
```typescript
// Before
import { WebScrapingService } from './services/web-scraping-service';

export class SummarizeTool implements MCPTool {
  private webScraper: WebScrapingService;
  
  constructor(webScraper: WebScrapingService) {
    this.webScraper = webScraper;
  }
  
  // Tool methods using webScraper
}

// After
import { ISearchAdapter } from './adapters/search-adapter-interface';

export class SummarizeTool implements MCPTool {
  private searchService: ISearchAdapter;
  
  constructor(searchService: ISearchAdapter) {
    this.searchService = searchService;
  }
  
  // Updated tool methods using searchService
}
```

3. Update tool execution logic to handle SearchResult objects:
   - Replace calls to `webScraper.fetchPage()` with `searchService.fetchContent()`
   - Replace calls to `webScraper.samplePages()` with `searchService.sampleDomain()`
   - Update parsing logic to handle the standardized SearchResult format

4. Modify MarketingPostGeneratorServer to register SearchService in DI container:
```typescript
// In server initialization
import { Container } from 'inversify';
import { ISearchAdapter } from './adapters/search-adapter-interface';
import { FirecrawlSearchAdapter } from './adapters/firecrawl-search-adapter';

const container = new Container();
// Register the search adapter
container.bind<ISearchAdapter>(TYPES.SearchAdapter).to(FirecrawlSearchAdapter).inSingletonScope();

// Update tool registrations to use the search adapter
container.bind<SampleTool>(TYPES.SampleTool).toDynamicValue((context) => {
  const searchAdapter = context.container.get<ISearchAdapter>(TYPES.SearchAdapter);
  return new SampleTool(searchAdapter);
}).inSingletonScope();

container.bind<SummarizeTool>(TYPES.SummarizeTool).toDynamicValue((context) => {
  const searchAdapter = context.container.get<ISearchAdapter>(TYPES.SearchAdapter);
  return new SummarizeTool(searchAdapter);
}).inSingletonScope();
```

5. Add proper error handling for search adapter failures:
```typescript
async execute(params: SampleToolParams): Promise<SampleToolResult> {
  try {
    const samples = await this.searchService.sampleDomain(params.domain, params.count);
    // Process samples
    return { /* result */ };
  } catch (error) {
    if (error instanceof SearchAdapterError) {
      // Handle search-specific errors
      logger.error(`Search adapter error: ${error.message}`, { domain: params.domain });
      throw new ToolExecutionError(`Failed to sample domain: ${error.message}`);
    } else {
      // Handle general errors
      logger.error(`Unexpected error in SampleTool: ${error.message}`);
      throw new ToolExecutionError('An unexpected error occurred while sampling the domain');
    }
  }
}
```

6. Ensure backward compatibility by maintaining the same input/output schemas for both tools:
   - Keep the same parameter structure in tool definitions
   - Ensure the returned data structure matches the original format
   - Add any necessary data transformation between the search adapter results and the expected tool output format

# Test Strategy:

