# Task ID: 9
# Title: Implement Pluggable Search Adapter Architecture
# Status: done
# Dependencies: 2, 5, 6
# Priority: high
# Description: Create a flexible search adapter architecture that replaces the current web scraping system with a clean interface for switching between different search providers while maintaining consistent tool behavior.
# Details:
1. Create an abstract `ISearchAdapter` interface:
```typescript
export interface ISearchAdapter {
  // Fetch content from a single URL
  fetchContent(url: string): Promise<string>;
  
  // Sample multiple pages from a domain
  sampleDomain(domain: string, count: number): Promise<Array<{url: string, content: string}>>;
  
  // Get search results for a query
  search(query: string, options?: SearchOptions): Promise<SearchResult[]>;
  
  // Initialize the adapter with configuration
  initialize(config: Record<string, any>): Promise<void>;
}

export interface SearchOptions {
  limit?: number;
  offset?: number;
  filters?: Record<string, any>;
}

export interface SearchResult {
  url: string;
  title: string;
  snippet: string;
}
```

2. Implement the `SearchAdapterFactory` for managing provider instances:
```typescript
export class SearchAdapterFactory {
  private static adapters: Map<string, new () => ISearchAdapter> = new Map();
  
  // Register a new adapter implementation
  public static registerAdapter(name: string, adapterClass: new () => ISearchAdapter): void {
    this.adapters.set(name.toLowerCase(), adapterClass);
  }
  
  // Create an instance of a specific adapter
  public static createAdapter(name: string): ISearchAdapter {
    const AdapterClass = this.adapters.get(name.toLowerCase());
    if (!AdapterClass) {
      throw new Error(`Search adapter '${name}' not found`);
    }
    return new AdapterClass();
  }
  
  // List all available adapters
  public static getAvailableAdapters(): string[] {
    return Array.from(this.adapters.keys());
  }
}
```

3. Create concrete adapter implementations for different providers:
```typescript
// Example implementation for FirecrawlAdapter
export class FirecrawlAdapter implements ISearchAdapter {
  private apiKey: string;
  private baseUrl: string;
  
  async initialize(config: Record<string, any>): Promise<void> {
    this.apiKey = config.apiKey;
    this.baseUrl = config.baseUrl || 'https://api.firecrawl.com/v1';
  }
  
  async fetchContent(url: string): Promise<string> {
    // Implementation using Firecrawl API
    // ...
  }
  
  async sampleDomain(domain: string, count: number): Promise<Array<{url: string, content: string}>> {
    // Implementation using Firecrawl API
    // ...
  }
  
  async search(query: string, options?: SearchOptions): Promise<SearchResult[]> {
    // Implementation using Firecrawl API
    // ...
  }
}

// Similar implementations for PerplexityAdapter, SerpApiAdapter, etc.
```

4. Implement the `SearchService` as the main service layer:
```typescript
export class SearchService {
  private adapter: ISearchAdapter;
  private fallbackAdapters: ISearchAdapter[] = [];
  
  constructor(primaryAdapter: ISearchAdapter, fallbacks: ISearchAdapter[] = []) {
    this.adapter = primaryAdapter;
    this.fallbackAdapters = fallbacks;
  }
  
  // Set a new primary adapter
  public setAdapter(adapter: ISearchAdapter): void {
    this.adapter = adapter;
  }
  
  // Add a fallback adapter
  public addFallbackAdapter(adapter: ISearchAdapter): void {
    this.fallbackAdapters.push(adapter);
  }
  
  // Fetch content with fallback support
  public async fetchContent(url: string): Promise<string> {
    try {
      return await this.adapter.fetchContent(url);
    } catch (error) {
      // Try fallback adapters
      for (const fallbackAdapter of this.fallbackAdapters) {
        try {
          return await fallbackAdapter.fetchContent(url);
        } catch (fallbackError) {
          // Continue to next fallback
        }
      }
      throw new Error(`Failed to fetch content from ${url} with all adapters`);
    }
  }
  
  // Sample domain with fallback support
  public async sampleDomain(domain: string, count: number): Promise<Array<{url: string, content: string}>> {
    try {
      return await this.adapter.sampleDomain(domain, count);
    } catch (error) {
      // Try fallback adapters
      for (const fallbackAdapter of this.fallbackAdapters) {
        try {
          return await fallbackAdapter.sampleDomain(domain, count);
        } catch (fallbackError) {
          // Continue to next fallback
        }
      }
      throw new Error(`Failed to sample domain ${domain} with all adapters`);
    }
  }
  
  // Search with fallback support
  public async search(query: string, options?: SearchOptions): Promise<SearchResult[]> {
    try {
      return await this.adapter.search(query, options);
    } catch (error) {
      // Try fallback adapters
      for (const fallbackAdapter of this.fallbackAdapters) {
        try {
          return await fallbackAdapter.search(query, options);
        } catch (fallbackError) {
          // Continue to next fallback
        }
      }
      throw new Error(`Failed to search for "${query}" with all adapters`);
    }
  }
}
```

5. Add configuration system for selecting and configuring search adapters:
```typescript
// In config.ts or similar
export interface SearchConfig {
  defaultAdapter: string;
  fallbackAdapters: string[];
  adapterConfigs: Record<string, Record<string, any>>;
}

// Example configuration
const searchConfig: SearchConfig = {
  defaultAdapter: 'firecrawl',
  fallbackAdapters: ['serpapi', 'perplexity'],
  adapterConfigs: {
    firecrawl: {
      apiKey: process.env.FIRECRAWL_API_KEY,
      baseUrl: 'https://api.firecrawl.com/v1'
    },
    serpapi: {
      apiKey: process.env.SERPAPI_API_KEY
    },
    perplexity: {
      apiKey: process.env.PERPLEXITY_API_KEY
    }
  }
};

// Factory function to create SearchService from config
export async function createSearchService(config: SearchConfig): Promise<SearchService> {
  // Create and initialize primary adapter
  const primaryAdapter = SearchAdapterFactory.createAdapter(config.defaultAdapter);
  await primaryAdapter.initialize(config.adapterConfigs[config.defaultAdapter] || {});
  
  // Create and initialize fallback adapters
  const fallbackAdapters: ISearchAdapter[] = [];
  for (const adapterName of config.fallbackAdapters) {
    const adapter = SearchAdapterFactory.createAdapter(adapterName);
    await adapter.initialize(config.adapterConfigs[adapterName] || {});
    fallbackAdapters.push(adapter);
  }
  
  return new SearchService(primaryAdapter, fallbackAdapters);
}
```

6. Update existing tools to use the new SearchService:
```typescript
// In the sample tool implementation
import { SearchService } from './services/search-service';

export class SampleTool implements MCPTool {
  private searchService: SearchService;
  
  constructor(searchService: SearchService) {
    this.searchService = searchService;
  }
  
  async execute(params: any): Promise<any> {
    const domain = params.domain;
    const count = params.count || 5;
    
    // Use the search service instead of direct web scraping
    const samples = await this.searchService.sampleDomain(domain, count);
    
    // Process samples and continue with analysis
    // ...
  }
}
```

7. Register the adapters during application startup:
```typescript
// In app.ts or similar
import { SearchAdapterFactory } from './services/search-adapter-factory';
import { FirecrawlAdapter } from './adapters/firecrawl-adapter';
import { SerpApiAdapter } from './adapters/serpapi-adapter';
import { PerplexityAdapter } from './adapters/perplexity-adapter';

// Register all available adapters
SearchAdapterFactory.registerAdapter('firecrawl', FirecrawlAdapter);
SearchAdapterFactory.registerAdapter('serpapi', SerpApiAdapter);
SearchAdapterFactory.registerAdapter('perplexity', PerplexityAdapter);

// Create search service from configuration
const searchService = await createSearchService(searchConfig);

// Use the search service when creating tools
const sampleTool = new SampleTool(searchService);
const summarizeTool = new SummarizeTool(searchService);
// ...
```

# Test Strategy:

