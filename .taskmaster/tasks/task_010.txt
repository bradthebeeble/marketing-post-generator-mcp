# Task ID: 10
# Title: Generate Tone Tool Implementation
# Status: pending
# Dependencies: 3, 4, 5
# Priority: medium
# Description: Implement the 'generate_tone' tool that analyzes content to determine the tone of voice used in a blog or specific post.
# Details:
1. Create a tool definition for the tone generation functionality
2. Implement logic to analyze either a specific post or use samples from a domain
3. Use Claude Code to extract tone characteristics
4. Store the tone analysis in the .postgen directory
5. Implement options for different levels of detail in the analysis

```typescript
import { MCPTool } from '@modelcontextprotocol/sdk';
import { ClaudeService } from './services/claude-service';
import * as fs from 'fs/promises';
import * as path from 'path';

export const generateToneTool: MCPTool = {
  name: 'marketing_post_generator_mcp__generate_tone',
  description: 'Analyze content to determine the tone of voice used',
  parameters: {
    source: {
      type: 'string',
      description: 'URL of a specific post or domain name',
    },
    detailLevel: {
      type: 'string',
      description: 'Level of detail in the analysis',
      enum: ['basic', 'detailed', 'comprehensive'],
      default: 'detailed',
    },
  },
  handler: async ({ source, detailLevel }, { claudeService }) => {
    // Validate .postgen directory exists
    const postgenDir = path.join(process.cwd(), '.postgen');
    try {
      await fs.access(postgenDir);
    } catch (error) {
      throw new Error('Please run the init prompt first');
    }
    
    let content;
    let sourceType;
    
    // Determine if source is a URL or domain
    try {
      const url = new URL(source);
      if (url.pathname === '/' || url.pathname === '') {
        sourceType = 'domain';
        // Get samples from the domain
        content = await getSamplesFromDomain(url.hostname);
      } else {
        sourceType = 'post';
        // Fetch specific post
        const post = await fetchBlogPost(source);
        content = post.content;
      }
    } catch (error) {
      // Not a valid URL, assume it's a domain
      sourceType = 'domain';
      content = await getSamplesFromDomain(source);
    }
    
    // Generate tone analysis with Claude
    const promptByDetailLevel = {
      basic: `Analyze this content and describe the basic tone of voice used:\n\n${content}`,
      detailed: `Analyze this content and provide a detailed description of the tone of voice, including formality, emotion, and style:\n\n${content}`,
      comprehensive: `Provide a comprehensive analysis of the tone of voice in this content, including formality, emotion, style, word choice patterns, sentence structure tendencies, and unique voice characteristics:\n\n${content}`,
    };
    
    const toneAnalysis = await claudeService.generateContent(promptByDetailLevel[detailLevel]);
    
    // Save the analysis
    const result = {
      source,
      sourceType,
      detailLevel,
      toneAnalysis,
      timestamp: new Date().toISOString(),
    };
    
    const tonePath = path.join(postgenDir, 'tone-analysis', `${sourceType}-${Date.now()}.json`);
    await fs.mkdir(path.dirname(tonePath), { recursive: true });
    await fs.writeFile(tonePath, JSON.stringify(result, null, 2));
    
    return result;
  },
};

async function getSamplesFromDomain(domain) {
  // Implementation to get or fetch samples from a domain
}

async function fetchBlogPost(url) {
  // Implementation to fetch a specific blog post
}
```

# Test Strategy:
Test with different source types (URL vs domain). Test different detail levels. Verify tone analysis results with mock Claude responses. Test error handling for invalid sources and network issues.
