# Task ID: 14
# Title: Post Narrative Generator Tool Implementation
# Status: pending
# Dependencies: 3, 4, 13
# Priority: medium
# Description: Implement the tool for generating narratives and bullet points for upcoming posts based on the content plan.
# Details:
1. Create a tool definition for narrative generation
2. Implement logic to read from the content plan
3. Use Claude Code to generate detailed narratives and bullet points
4. Store the narratives in the .postgen/narratives directory
5. Implement options for different narrative styles and levels of detail

```typescript
import { MCPTool } from '@modelcontextprotocol/sdk';
import { ClaudeService } from './services/claude-service';
import * as fs from 'fs/promises';
import * as path from 'path';

export const narrativeGeneratorTool: MCPTool = {
  name: 'marketing_post_generator_mcp__generate_narrative',
  description: 'Generate narratives and bullet points for upcoming posts',
  parameters: {
    postId: {
      type: 'string',
      description: 'ID of the post from the content plan',
    },
    style: {
      type: 'string',
      description: 'Style of the narrative',
      enum: ['concise', 'detailed', 'storytelling'],
      default: 'detailed',
    },
  },
  handler: async ({ postId, style }, { claudeService }) => {
    // Validate .postgen directory exists
    const postgenDir = path.join(process.cwd(), '.postgen');
    try {
      await fs.access(postgenDir);
    } catch (error) {
      throw new Error('Please run the init prompt first');
    }
    
    // Get the latest content plan
    const contentPlan = await getLatestContentPlan(postgenDir);
    if (!contentPlan) {
      throw new Error('No content plan found. Please create a content plan first.');
    }
    
    // Find the post in the content plan
    const post = contentPlan.plan.find(p => p.id === postId);
    if (!post) {
      throw new Error(`Post with ID ${postId} not found in the content plan.`);
    }
    
    // Get tone analysis for the domain
    const toneAnalysis = await getExistingToneAnalysis(contentPlan.domain, postgenDir);
    
    // Generate narrative with Claude
    const prompt = buildNarrativePrompt({
      post,
      style,
      toneAnalysis,
      domain: contentPlan.domain,
    });
    
    const narrative = await claudeService.generateContent(prompt);
    
    // Parse the narrative into a structured format
    const structuredNarrative = parseNarrative(narrative);
    
    // Save the narrative
    const narrativePath = path.join(postgenDir, 'narratives', `${postId}-${Date.now()}.json`);
    await fs.mkdir(path.dirname(narrativePath), { recursive: true });
    
    const result = {
      postId,
      title: post.title,
      style,
      narrative: structuredNarrative,
      rawNarrative: narrative,
      createdAt: new Date().toISOString(),
    };
    
    await fs.writeFile(narrativePath, JSON.stringify(result, null, 2));
    
    return result;
  },
};

function buildNarrativePrompt(options) {
  // Build a prompt for narrative generation based on options
  const stylePrompts = {
    concise: 'Create a concise outline with key bullet points',
    detailed: 'Create a detailed narrative with main sections and supporting points',
    storytelling: 'Create a narrative that tells a compelling story around the topic',
  };
  
  return `Based on the following post idea from the content plan for ${options.domain}:\n\nTitle: ${options.post.title}\nTopic: ${options.post.topic}\nKeywords: ${options.post.keywords.join(', ')}\n\n${stylePrompts[options.style]}\n\nUse this tone of voice: ${options.toneAnalysis}`;
}

function parseNarrative(rawNarrative) {
  // Parse the raw narrative into a structured format
  // This could extract sections, bullet points, etc.
}

async function getLatestContentPlan(postgenDir) {
  // Get the latest content plan
}

async function getExistingToneAnalysis(domain, postgenDir) {
  // Get existing tone analysis for the domain
}
```

# Test Strategy:
Test narrative generation with different styles. Test with different post types from the content plan. Verify narratives are correctly stored in the .postgen directory. Test error handling for missing content plans or invalid post IDs.
