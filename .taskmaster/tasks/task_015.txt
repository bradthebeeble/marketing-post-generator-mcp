# Task ID: 15
# Title: Blog Post Generator Tool Implementation
# Status: pending
# Dependencies: 3, 4, 14
# Priority: high
# Description: Implement the tool for writing complete blog posts from scratch or based on narratives.
# Details:
1. Create a tool definition for blog post generation
2. Implement logic to use narratives or generate from scratch
3. Use Claude Code to write complete blog posts
4. Store the posts in the .postgen/posts directory
5. Implement options for different post lengths and styles
6. Add functionality to revise existing posts

```typescript
import { MCPTool } from '@modelcontextprotocol/sdk';
import { ClaudeService } from './services/claude-service';
import * as fs from 'fs/promises';
import * as path from 'path';

export const blogPostGeneratorTool: MCPTool = {
  name: 'marketing_post_generator_mcp__write_post',
  description: 'Write a complete blog post from scratch or based on a narrative',
  parameters: {
    narrativeId: {
      type: 'string',
      description: 'ID of the narrative to base the post on (optional)',
      required: false,
    },
    title: {
      type: 'string',
      description: 'Title of the blog post (required if narrativeId not provided)',
      required: false,
    },
    topic: {
      type: 'string',
      description: 'Topic of the blog post (required if narrativeId not provided)',
      required: false,
    },
    keywords: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'Keywords for the blog post (optional)',
      required: false,
    },
    wordCount: {
      type: 'number',
      description: 'Target word count for the post',
      default: 1000,
    },
    style: {
      type: 'string',
      description: 'Writing style for the post',
      enum: ['informative', 'persuasive', 'storytelling', 'technical', 'conversational'],
      default: 'informative',
    },
  },
  handler: async ({ narrativeId, title, topic, keywords, wordCount, style }, { claudeService }) => {
    // Validate .postgen directory exists
    const postgenDir = path.join(process.cwd(), '.postgen');
    try {
      await fs.access(postgenDir);
    } catch (error) {
      throw new Error('Please run the init prompt first');
    }
    
    // Get domain from config
    const config = await getPostgenConfig(postgenDir);
    
    // Get tone analysis for the domain
    const toneAnalysis = await getExistingToneAnalysis(config.domain, postgenDir);
    
    let narrative = null;
    
    // If narrativeId is provided, get the narrative
    if (narrativeId) {
      narrative = await getNarrative(narrativeId, postgenDir);
      title = narrative.title;
      topic = narrative.post.topic;
      keywords = narrative.post.keywords;
    } else if (!title || !topic) {
      throw new Error('Either narrativeId or both title and topic must be provided.');
    }
    
    // Generate blog post with Claude
    const prompt = buildBlogPostPrompt({
      title,
      topic,
      keywords: keywords || [],
      wordCount,
      style,
      toneAnalysis,
      narrative: narrative ? narrative.rawNarrative : null,
      domain: config.domain,
    });
    
    const blogPost = await claudeService.generateContent(prompt);
    
    // Save the blog post
    const postId = Date.now();
    const postPath = path.join(postgenDir, 'posts', `${postId}.md`);
    await fs.mkdir(path.dirname(postPath), { recursive: true });
    
    // Add metadata as frontmatter
    const frontmatter = `---
title: ${title}
topic: ${topic}
keywords: ${(keywords || []).join(', ')}
wordCount: ${wordCount}
style: ${style}
createdAt: ${new Date().toISOString()}
narrativeId: ${narrativeId || null}
---\n\n`;
    
    await fs.writeFile(postPath, frontmatter + blogPost);
    
    // Save metadata separately
    const metaPath = path.join(postgenDir, 'posts', `${postId}.json`);
    const metadata = {
      id: postId.toString(),
      title,
      topic,
      keywords: keywords || [],
      wordCount,
      style,
      narrativeId: narrativeId || null,
      createdAt: new Date().toISOString(),
    };
    
    await fs.writeFile(metaPath, JSON.stringify(metadata, null, 2));
    
    return {
      ...metadata,
      excerpt: blogPost.substring(0, 200) + '...',
      filePath: postPath,
    };
  },
};

function buildBlogPostPrompt(options) {
  // Build a prompt for blog post generation based on options
  let prompt = `Write a ${options.style} blog post about ${options.topic} with the title "${options.title}".`;
  
  if (options.keywords && options.keywords.length > 0) {
    prompt += `\n\nInclude these keywords: ${options.keywords.join(', ')}`;
  }
  
  prompt += `\n\nThe post should be approximately ${options.wordCount} words.`;
  
  if (options.toneAnalysis) {
    prompt += `\n\nUse this tone of voice: ${options.toneAnalysis}`;
  }
  
  if (options.narrative) {
    prompt += `\n\nBase the post on this narrative outline:\n${options.narrative}`;
  }
  
  prompt += `\n\nThis is for the blog at ${options.domain}.`;
  
  return prompt;
}

async function getPostgenConfig(postgenDir) {
  // Get the postgen config
  const configPath = path.join(postgenDir, 'config.json');
  const configData = await fs.readFile(configPath, 'utf-8');
  return JSON.parse(configData);
}

async function getExistingToneAnalysis(domain, postgenDir) {
  // Get existing tone analysis for the domain
}

async function getNarrative(narrativeId, postgenDir) {
  // Get a narrative by ID
}
```

# Test Strategy:
Test post generation with and without narratives. Test different styles and word counts. Verify posts are correctly stored in the .postgen directory. Test error handling for missing narratives or invalid parameters.
